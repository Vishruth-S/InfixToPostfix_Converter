{"version":3,"sources":["Assets/imgs/i2plogo2.png","Assets/imgs/gh_svg.svg","Components/ShowTables/Showtables.js","Components/Converter/Converter.js","Components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Showtables","props","operatorsTable","tables","postfixTable","infix","rows","key","entries","index","value","push","className","isAlpha","ch","test","getPrecedence","c","isOpeningBracket","isClosingBracket","Converter","state","postfix","convert","operators","top","i","length","pop","setState","this","Component","Navbar","alt","src","Logo","svg","App","submitted","inputValue","inputChangeHandler","e","target","submitHandler","replace","placeholder","onChange","onClick","style","display","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f21a6cdf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/i2plogo2.009cfb5e.png\";","module.exports = __webpack_public_path__ + \"static/media/gh_svg.a56223e9.svg\";","import React from 'react'\r\nimport './Showtables.css'\r\n\r\nconst Showtables = (props) => {\r\n    const operatorsTable = [...props.tables.operatorsTable]\r\n    const postfixTable = [...props.tables.postfixTable]\r\n    const infix = [...props.tables.infix]\r\n    const rows = [\r\n        <tr key={-1}>\r\n            <th>Infix symbol</th>\r\n            <th>Operator Stack</th>\r\n            <th>Postfix</th>\r\n        </tr>\r\n    ]\r\n    for (const [index, value] of postfixTable.entries()) {\r\n        rows.push(\r\n            <tr key={index}>\r\n                <td className=\"alignCenter\">{infix[index]}</td>\r\n                <td className=\"alignCenter\">{operatorsTable[index]}</td>\r\n                <td>{value}</td>\r\n            </tr>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"table-container\">\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    {rows}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Showtables\r\n","import React, { Component } from 'react'\r\nimport Showtables from '../ShowTables/Showtables'\r\nimport './Converter.css'\r\n\r\nclass Converter extends Component {\r\n    state = {\r\n        postfix: \"\",\r\n        postfixTable: [],\r\n        operatorsTable: [],\r\n        infix: []\r\n    }\r\n    componentDidMount() {\r\n        this.setState({\r\n            infix: [...this.props.infix, \" \"]\r\n        })\r\n        this.convert()\r\n    }\r\n    convert = () => {\r\n        let operatorsTable = []\r\n        let postfixTable = []\r\n        let postfix = []\r\n        let operators = []\r\n        let top = -1\r\n        let infix = [...this.props.infix]\r\n        for (let i = 0; i < infix.length; i++) {\r\n            if (isAlpha(infix[i])) {\r\n                postfix += infix[i]\r\n            }\r\n            else if (!isOpeningBracket(infix[i]) && !isClosingBracket(infix[i])) {\r\n                while (operators.length !== 0 && !isOpeningBracket(operators[top]) && getPrecedence(infix[i]) <= getPrecedence(operators[top])) {\r\n                    postfix += operators[top];\r\n                    operators.pop()\r\n                    top -= 1\r\n                }\r\n                operators.push(infix[i])\r\n                top += 1\r\n            }\r\n            else if (isOpeningBracket(infix[i])) {\r\n                operators.push(infix[i]);\r\n                top += 1\r\n            }\r\n            else if (isClosingBracket(infix[i])) {\r\n                while (operators.length !== 0 && !isOpeningBracket(operators[top])) {\r\n                    postfix += operators[top]\r\n                    operators.pop()\r\n                    top -= 1\r\n                }\r\n                operators.pop()\r\n                top -= 1\r\n            }\r\n            operatorsTable.push([...operators])\r\n            postfixTable.push([...postfix])\r\n        }\r\n        while (operators.length !== 0) {\r\n            postfix += operators[top]\r\n            operators.pop()\r\n            top -= 1\r\n            postfixTable.push([...postfix])\r\n            operatorsTable.push([...operators])\r\n        }\r\n        this.setState({\r\n            postfix: postfix,\r\n            postfixTable: postfixTable,\r\n            operatorsTable: operatorsTable\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"converter-main\">\r\n                <p className=\"postfix-exp\">Postfix Expression:  <b className=\"postfix\">{this.state.postfix}</b></p>\r\n                <Showtables tables={this.state} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction isAlpha(ch) {\r\n    return /^[A-Z]$/i.test(ch);\r\n}\r\n\r\nfunction getPrecedence(c) {\r\n    switch (c) {\r\n        case \"$\":\r\n            return 4;\r\n        case \"^\":\r\n            return 3;\r\n        case \"/\":\r\n        case \"*\":\r\n            return 2;\r\n        case \"+\":\r\n        case \"-\":\r\n            return 1;\r\n        default:\r\n            return -1;\r\n    }\r\n}\r\n\r\nfunction isOpeningBracket(c) {\r\n    return c === '(' || c === '{' || c === '['\r\n}\r\n\r\nfunction isClosingBracket(c) {\r\n    return c === ')' || c === '}' || c === ']'\r\n}\r\n\r\nexport default Converter","import React from 'react'\r\n// import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './Navbar.css'\r\nimport Logo from '../../Assets/imgs/i2plogo2.png'\r\nimport svg from '../../Assets/imgs/gh_svg.svg'\r\nconst Navbar = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <span className=\"navbar-brand\" ><img className=\"nav-logo\" alt=\"Infix2Postfix_logo\" src={Logo} /></span>\r\n            <img src={svg} className=\"gh-svg\" alt=\"github-icon\" />\r\n            <span className=\"navbar-link\">Star me on Github</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport Converter from './Components/Converter/Converter'\r\nimport Navbar from './Components/Navbar/Navbar'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        submitted: false,\r\n        infix: \"\",\r\n        inputValue: \"\",\r\n    }\r\n\r\n    inputChangeHandler = (e) => {\r\n        this.setState({\r\n            submitted: false,\r\n            inputValue: e.target.value\r\n        })\r\n    }\r\n\r\n    submitHandler = () => {\r\n        let infix = this.state.inputValue\r\n        infix = infix.replace(/\\s+/g, '')\r\n        this.setState({\r\n            infix: infix,\r\n            submitted: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n\r\n                <div className=\"App\">\r\n                    <h2 className=\"heading\">Infix to postfix Converter</h2>\r\n                    <p>This is a tool to convert any infix expression to postfix expression with all steps shown in the table</p>\r\n                    <hr></hr>\r\n                    <h5>How to use?</h5>\r\n                    <p>Enter any infix expression in the input box, for example: A+(B-C)*D/E^F</p>\r\n                    <p><i>If using unary - or +, use $ instead. Example: a*-b must be entered as a*$b</i></p>\r\n                    <p>Press Convert to get the postfix expression and table</p>\r\n                    <div className=\"input-container\">\r\n                        <input className=\"infix-input\" placeholder=\"Enter infix expression\" onChange={this.inputChangeHandler}></input>\r\n                        <button className=\"convert-btn\" onClick={this.submitHandler}>Convert</button>\r\n                    </div>\r\n                    {this.state.submitted ? <Converter infix={this.state.infix} /> : null}\r\n                </div>\r\n                <div className=\"footer\" style={{ display: this.state.submitted ? \"block\" : \"none\" }}>\r\n                    <hr></hr>\r\n                    <p>Found any bug? Report it <a href=\"\">here</a> </p>\r\n                    <p>Made with <i className=\"fa fa-heart\"></i> by <a href=\"\">VS</a></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}